use std::fs;
pub fn solution() {

    let file = read_file(String::from("inputs/input2.txt"));

    println!("Solution for first part: {}", solve1(file.clone()));
}

fn read_file(path: String) -> Vec<Vec<i32>> {
    let mut vec: Vec<Vec<i32>> = vec![vec![]];

    let contents = fs::read_to_string(path).expect("no file");

    let mut i: usize = 0;
    let mut temp = String::from("");

    //******************Spaghetti code begin******************

    for part in contents.chars() {
        if part == '\n' {

            let parse_result = temp.parse::<i32>();

            match parse_result {
                Ok(data) => vec[i].push(data),
                _ => {}
            }

            i += 1;
            vec.push(vec![]);
            temp = String::from("");

        } else if part == ' ' {

            vec[i].push(temp.parse::<i32>().unwrap());
            temp = String::from("");

        } else if part != ' ' {
            if part.is_digit(10) {

                temp.push_str(&String::from(part));

            }
        }
    }

    //******************Spaghetti code end******************
    
    vec
}

fn solve1(vec: Vec<Vec<i32>>) -> i32{
    let mut safe = 0;
    let mut increasing: bool;
    let mut temp_safe: bool;

    for vector in vec{

        if vector.len() <= 1 {break}
        
        if vector[0] - vector[1] < 0 {increasing = true}
        else {increasing = false}

        temp_safe = true;

        for i in 2..vector.len(){
            if (vector[i-1] - vector[i] < 0) != increasing || !( (vector[i-1] - vector[i]).abs() >= 1 && (vector[i-1] - vector[i]).abs() <= 3 ) {
                temp_safe = false;

                break;

            } 
        }

        if temp_safe {safe += 1}

    }

    

    safe
}
